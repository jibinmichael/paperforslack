const { App } = require('@slack/bolt');
const { WebClient } = require('@slack/web-api');
const OpenAI = require('openai');
require('dotenv').config();

// Initialize OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// Initialize Slack app
const app = new App({
  token: process.env.SLACK_BOT_TOKEN,
  signingSecret: process.env.SLACK_SIGNING_SECRET,
  socketMode: true,
  appToken: process.env.SLACK_APP_TOKEN,
  port: process.env.PORT || 10000
});

// In-memory storage for message batching and canvas tracking
const channelData = new Map();
const canvasData = new Map();

// Configuration
const CONFIG = {
  BATCH_TIME_WINDOW: 2 * 60 * 1000, // 2 minutes
  BATCH_MESSAGE_LIMIT: 10,
  CANVAS_UPDATE_DEBOUNCE: 3 * 60 * 1000, // 3 minutes
  MAX_MESSAGES_FOR_SUMMARY: 50
};

// Enhanced Granola-style prompt for Canvas formatting
const GRANOLA_PROMPT = `
You are creating a conversation summary in Granola-style format, optimized for Slack Canvas display. 

**Canvas Formatting Guidelines:**
- Use clean, scannable structure with clear headers
- Include emojis for visual hierarchy
- Focus on actionable insights and key decisions
- Use bullet points and numbered lists effectively
- Include participant context when relevant
- Highlight outcomes, next steps, and important information

**Format the summary exactly as follows:**

## 🗣️ **Key Participants**
- List main contributors with their key contributions
- Focus on who drove decisions or important discussions

## 💬 **Main Discussion Points**  
- **Topic 1**: Key insights and context
- **Topic 2**: Important discussions and viewpoints
- Use bullet sub-points for details when needed

## ✅ **Decisions & Agreements**
- **Decision 1**: What was decided and why
- **Decision 2**: Any agreements or conclusions reached
- Include decision owners when mentioned

## 🎯 **Action Items & Next Steps**
- **@Person**: Specific task or responsibility
- **Timeline**: Any deadlines or timeframes mentioned
- **Follow-up**: Required next steps or meetings

## 📌 **Key Insights & Resources**
- Important quotes or insights
- Links, documents, or resources shared
- Context that might be valuable later

## 🔍 **Context & Background**
- Why this conversation happened
- Any background context that's important
- Related previous discussions or decisions

**Important**: 
- If the conversation is brief or lacks substantial content, focus on what WAS discussed
- Always provide value even for short conversations
- Use clear, professional language
- Structure for easy scanning and future reference

Summarize this Slack conversation:
`;

// Initialize channel data structure
function initChannelData(channelId) {
  if (!channelData.has(channelId)) {
    channelData.set(channelId, {
      messages: [],
      lastBatchTime: Date.now(),
      pendingUpdate: false
    });
  }
}

// Add message to batch
function addMessageToBatch(channelId, message) {
  initChannelData(channelId);
  const data = channelData.get(channelId);
  
  data.messages.push({
    user: message.user,
    text: message.text,
    timestamp: message.ts,
    thread_ts: message.thread_ts
  });

  // Keep only recent messages
  if (data.messages.length > CONFIG.MAX_MESSAGES_FOR_SUMMARY) {
    data.messages = data.messages.slice(-CONFIG.MAX_MESSAGES_FOR_SUMMARY);
  }
}

// Check if batch should be processed
function shouldProcessBatch(channelId) {
  const data = channelData.get(channelId);
  if (!data) return false;

  const timeSinceLastBatch = Date.now() - data.lastBatchTime;
  const messageCount = data.messages.length;

  return (
    timeSinceLastBatch >= CONFIG.BATCH_TIME_WINDOW ||
    messageCount >= CONFIG.BATCH_MESSAGE_LIMIT
  ) && !data.pendingUpdate;
}

// Generate AI summary
async function generateSummary(messages) {
  try {
    const conversationText = messages.map(msg => 
      `${msg.user}: ${msg.text}`
    ).join('\n');

    const response = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        {
          role: "system",
          content: GRANOLA_PROMPT
        },
        {
          role: "user",
          content: conversationText
        }
      ],
      max_tokens: 1500,
      temperature: 0.3
    });

    return response.choices[0].message.content;
  } catch (error) {
    console.error('Error generating summary:', error);
    return "❌ Error generating summary. Please try again later.";
  }
}

// Create beautiful Canvas with enhanced formatting
async function createCanvasContent(summary) {
  return `# 📄 Paper: Conversation Summary

---

${summary}

---

*🤖 Auto-generated by Paper • Last updated: ${new Date().toLocaleString()}*

---

### 🔄 **How Paper Works**
- **Smart Batching**: Summarizes every 10 messages or 2 minutes
- **Auto-Updates**: Canvas refreshes automatically  
- **AI-Powered**: Uses OpenAI GPT-4 for intelligent summaries
- **Granola Format**: Structured, scannable conversation insights

*💡 Mention @Paper with "summary" to trigger manual updates*`;
}

// Create or update summary using Canvas API
async function updateCanvas(channelId, summary) {
  try {
    let canvasId = canvasData.get(channelId);
    const canvasContent = await createCanvasContent(summary);
    
    if (!canvasId) {
      // Create new channel canvas using the correct API
      console.log('🎨 Creating new channel canvas:', channelId);
      
      const response = await app.client.conversations.canvases.create({
        channel_id: channelId,
        title: "📄 Paper: Conversation Summary",
        document_content: {
          type: "markdown",
          markdown: canvasContent
        }
      });
      
      canvasId = response.canvas_id;
      canvasData.set(channelId, canvasId);
      
      console.log(`✅ Channel Canvas created successfully: ${canvasId}`);
      
      // Notify channel about new canvas with beautiful message
      await app.client.chat.postMessage({
        channel: channelId,
        text: "🎨 *Paper* Canvas Created!",
        blocks: [
          {
            type: "section",
            text: {
              type: "mrkdwn",
              text: "🎨 *Paper has created your conversation summary Canvas!*\n\n✨ Check the Canvas tab above to see your beautiful, auto-updating summary."
            }
          },
          {
            type: "divider"
          },
          {
            type: "section",
            text: {
              type: "mrkdwn",
              text: "🔄 *Auto-Updates:* Every 10 messages or 2 minutes\n🤖 *AI-Powered:* Granola-style intelligent summaries\n💬 *Manual Trigger:* Mention @Paper with 'summary'"
            }
          }
        ]
      });
    } else {
      // Update existing canvas with enhanced content
      console.log('🔄 Updating existing canvas:', canvasId);
      
      await app.client.canvases.edit({
        canvas_id: canvasId,
        changes: [
          {
            operation: "replace",
            document_content: {
              type: "markdown", 
              markdown: canvasContent
            }
          }
        ]
      });
      
      console.log(`✅ Canvas updated successfully: ${canvasId}`);
      
      // Optional: Subtle update notification (only for manual triggers)
      if (Math.random() < 0.3) { // 30% chance to avoid spam
        await app.client.chat.postMessage({
          channel: channelId,
          text: "🔄 *Paper* Canvas updated with latest conversation insights!",
          blocks: [
            {
              type: "context",
              elements: [
                {
                  type: "mrkdwn",
                  text: "🔄 Canvas refreshed • Check the Canvas tab for updated summary"
                }
              ]
            }
          ]
        });
      }
    }
  } catch (error) {
    console.error('❌ Canvas API error:', error);
    
    // Enhanced fallback with better formatting
    try {
      await app.client.chat.postMessage({
        channel: channelId,
        text: "📄 *Paper: Conversation Summary*",
        blocks: [
          {
            type: "section",
            text: {
              type: "mrkdwn",
              text: "📄 *Paper: Conversation Summary*\n\n_(Canvas unavailable - using message format)_"
            }
          },
          {
            type: "divider"
          },
          {
            type: "section",
            text: {
              type: "mrkdwn",
              text: summary
            }
          },
          {
            type: "context",
            elements: [
              {
                type: "mrkdwn",
                text: `🤖 Generated by Paper • ${new Date().toLocaleString()}`
              }
            ]
          }
        ]
      });
      console.log(`📄 Enhanced summary posted as message for channel ${channelId}`);
    } catch (fallbackError) {
      console.error('❌ Error posting fallback message:', fallbackError);
    }
  }
}

// Process message batch
async function processBatch(channelId) {
  const data = channelData.get(channelId);
  if (!data || data.messages.length === 0) return;

  data.pendingUpdate = true;
  
  try {
    console.log(`Processing batch for channel ${channelId} with ${data.messages.length} messages`);
    
    const summary = await generateSummary(data.messages);
    await updateCanvas(channelId, summary);
    
    data.lastBatchTime = Date.now();
  } catch (error) {
    console.error('Error processing batch:', error);
  } finally {
    data.pendingUpdate = false;
  }
}

// Listen to all messages
app.message(async ({ message, say }) => {
  // Skip bot messages and system messages
  if (message.subtype || message.bot_id) return;
  
  const channelId = message.channel;
  
  // Add message to batch
  addMessageToBatch(channelId, message);
  
  // Check if we should process the batch
  if (shouldProcessBatch(channelId)) {
    // Add small delay to avoid rate limits
    setTimeout(() => processBatch(channelId), 1000);
  }
});

// Handle app mentions for manual trigger
app.event('app_mention', async ({ event, say }) => {
  const channelId = event.channel;
  
  if (event.text.includes('summary') || event.text.includes('update')) {
    await say("📄 Updating your conversation summary...");
    
    try {
      // Fetch recent conversation history from Slack
      console.log('Fetching conversation history for channel:', channelId);
      const result = await app.client.conversations.history({
        channel: channelId,
        limit: 50,
        exclude_archived: true
      });
      
      if (result.messages && result.messages.length > 0) {
        // Convert messages to our format and filter out bot messages
        const conversationMessages = result.messages
          .filter(msg => !msg.bot_id && !msg.subtype)
          .reverse() // Slack gives newest first, we want chronological order
          .map(msg => ({
            user: msg.user,
            text: msg.text || '',
            timestamp: msg.ts,
            thread_ts: msg.thread_ts
          }));
        
        console.log(`Found ${conversationMessages.length} messages to summarize`);
        
        if (conversationMessages.length > 0) {
          const summary = await generateSummary(conversationMessages);
          await updateCanvas(channelId, summary);
        } else {
          await say("📄 No recent conversation found to summarize. Try having a conversation first!");
        }
      } else {
        await say("📄 No conversation history found in this channel.");
      }
    } catch (error) {
      console.error('Error fetching conversation history:', error);
      await say("❌ Sorry, I couldn't fetch the conversation history. Please try again.");
    }
  } else {
    await say("📄 Hi! I'm *Paper* - I automatically create conversation summaries in a canvas. Mention me with 'summary' to update manually!");
  }
});

// Handle app installation
app.event('app_home_opened', async ({ event, client }) => {
  try {
    await client.views.publish({
      user_id: event.user,
      view: {
        type: 'home',
        blocks: [
          {
            type: 'section',
            text: {
              type: 'mrkdwn',
              text: '*📄 Welcome to Paper!*\n\nI automatically summarize channel conversations in Slack Canvas format.\n\n• Add me to any channel\n• I\'ll create a summary canvas automatically\n• Summaries update every few minutes\n• Mention me with "summary" for manual updates'
            }
          },
          {
            type: 'divider'
          },
          {
            type: 'section',
            text: {
              type: 'mrkdwn',
              text: '*🔧 How it works:*\n• Listens to channel messages\n• Batches them intelligently\n• Creates Granola-style summaries\n• Updates canvas automatically'
            }
          }
        ]
      }
    });
  } catch (error) {
    console.error('Error publishing home view:', error);
  }
});

// Cleanup old data periodically
setInterval(() => {
  const oneHourAgo = Date.now() - (60 * 60 * 1000);
  
  for (const [channelId, data] of channelData.entries()) {
    if (data.lastBatchTime < oneHourAgo && data.messages.length === 0) {
      channelData.delete(channelId);
    }
  }
}, 30 * 60 * 1000); // Clean up every 30 minutes

// Error handling
app.error((error) => {
  console.error('Slack app error:', error);
});

// Start the app with HTTP server for Render port binding
(async () => {
  try {
    const port = process.env.PORT || 10000;
    
    // Start Slack app in Socket Mode (no HTTP needed for Slack)
    await app.start();
    console.log(`⚡️ Paper Slack app connected via Socket Mode!`);
    
    // Start HTTP server for Render port detection
    const express = require('express');
    const httpApp = express();
    
    // Health check endpoint
    httpApp.get('/', (req, res) => {
      res.json({ 
        status: 'healthy', 
        app: 'Paper Slack Canvas Summarizer',
        mode: 'Socket Mode',
        timestamp: new Date().toISOString()
      });
    });
    
    httpApp.get('/health', (req, res) => {
      res.json({ status: 'ok', timestamp: Date.now() });
    });
    
    // Start HTTP server on the required port
    httpApp.listen(port, '0.0.0.0', () => {
      console.log(`🌐 HTTP server running on port ${port} for Render!`);
    });
    
  } catch (error) {
    console.error('Failed to start app:', error);
    process.exit(1);
  }
})(); 